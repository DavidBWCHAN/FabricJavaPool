/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FabricJavaPool;

import FabricJavaPool.util.SampleStore;
import FabricJavaPool.util.utils;
import org.apache.commons.pool2.BasePooledObjectFactory;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.PooledObject;
import org.apache.commons.pool2.impl.DefaultPooledObject;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.hyperledger.fabric.sdk.Channel;
import org.hyperledger.fabric.sdk.HFClient;
import org.hyperledger.fabric.sdk.NetworkConfig;
import org.hyperledger.fabric.sdk.User;
import org.hyperledger.fabric.sdk.security.CryptoSuite;

import java.io.File;
import java.nio.file.Paths;
import static java.lang.String.format;

public class Library {
    private static String config_network_path = "./src/main/resources/Networkconfig.json";
    private static String config_user_path = "./src/main/resources/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/keystore";

    public static ObjectPool<Channel> ChannelPool(){
        ObjectPool<Channel> mychannelPool = new GenericObjectPool<Channel>(new MyChannelBuilderFactory());
        return mychannelPool;
    }

    public static User getUser(){
        User appuser=null;
        File sampleStoreFile = new File(System.getProperty("user.home") + "/test.properties");
        if (sampleStoreFile.exists()) { //For testing start fresh
            sampleStoreFile.delete();
        }
        final SampleStore sampleStore = new SampleStore(sampleStoreFile);
        try {
            appuser = sampleStore.getMember("peer1", "Org1", "Org1MSP",
                    new File(String.valueOf(findFileSk(Paths.get(config_user_path).toFile()))),
                    new File("./src/main/resources/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp/signcerts/Admin@org1.example.com-cert.pem"));
        }
        catch (Exception e){
            e.printStackTrace();
        }
        return appuser;
    }

    private static class MyChannelBuilderFactory  extends BasePooledObjectFactory<Channel> {
        @Override
        public Channel create() throws Exception {
            Channel mychannel = null;
            User appuser = getUser();
            HFClient hfclient = HFClient.createNewInstance();
            try {
                CryptoSuite cryptoSuite = CryptoSuite.Factory.getCryptoSuite();
                hfclient.setCryptoSuite(cryptoSuite);
                NetworkConfig networkConfig = loadConfig(config_network_path);
                hfclient.setUserContext(appuser);
                hfclient.loadChannelFromConfig("mychannel", networkConfig);
                //System.out.println(networkConfig.getPeerNames());
                mychannel = hfclient.getChannel("mychannel");
                mychannel.initialize();
            } catch (Exception e) {
                System.out.println(e.toString());
            }
            return mychannel;
        }

        @Override
        public PooledObject<Channel> wrap(Channel obj) {
            // 将对象包装成池对象
            return new DefaultPooledObject<>(obj);
        }
        // ③ 反初始化每次回收的时候都会执行这个方法
        @Override
        public void passivateObject(PooledObject<Channel> pooledObject) {

        }

        @Override
        public boolean validateObject(final PooledObject<Channel> pooledObject) {
            Channel pooledObj = pooledObject.getObject();
            return pooledObj.isInitialized() & !pooledObj.isShutdown();
            //return true;
        }

    }

    private static File findFileSk(File directory) {

        File[] matches = directory.listFiles((dir, name) -> name.endsWith("_sk"));

        if (null == matches) {
            throw new RuntimeException(format("Matches returned null does %s directory exist?", directory.getAbsoluteFile().getName()));
        }

        if (matches.length != 1) {
            throw new RuntimeException(format("Expected in %s only 1 sk file but found %d", directory.getAbsoluteFile().getName(), matches.length));
        }

        return matches[0];

    }

    private static NetworkConfig loadConfig(String config_network_path) {
        try {
            return NetworkConfig.fromJsonFile(new File(config_network_path));
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
}
