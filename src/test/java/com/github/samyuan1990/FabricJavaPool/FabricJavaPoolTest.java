/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.samyuan1990.FabricJavaPool;

import com.github.samyuan1990.FabricJavaPool.util.TestUtil;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

public class FabricJavaPoolTest {

    @Test public void testChannelPool() {
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(TestUtil.getUser(), TestUtil.myChannel);
        try {
            FabricConnection fabricConnection = fabricConnectionPool.borrowObject();
            assertNotEquals("Test borrow item channel not null", fabricConnection, null);
            assertEquals("Test borrow item channel", fabricConnection.getMychannel().isInitialized(), true);
            FabricConnection fabricConnection2 = fabricConnectionPool.borrowObject();
            assertNotEquals("Test borrow item channel2 not null", fabricConnection2, null);
            assertEquals("Test borrow item channel2", fabricConnection2.getMychannel().isInitialized(), true);
            assertEquals("Test item should diff", fabricConnection2.equals(fabricConnection), false);
            System.out.println(System.getenv("ORG_GRADLE_PROJECT_LocalFabric"));
            if (System.getenv().containsKey("ORG_GRADLE_PROJECT_LocalFabric") && System.getenv("ORG_GRADLE_PROJECT_LocalFabric").equals("true")) {
                ExecuteResult rs = fabricConnection.query(TestUtil.chaincodeID, "query", "a");
                assertEquals("90", rs.getResult());
                System.out.println(rs);
                ExecuteResult rs2 = fabricConnection2.query(TestUtil.chaincodeID, "query", "a");
                assertNotEquals("91", rs2.getResult());
            }
            fabricConnectionPool.returnObject(fabricConnection);
            fabricConnectionPool.returnObject(fabricConnection2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test public void testChannelPoolException() {
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(null, TestUtil.myChannel);
        try {
            fabricConnectionPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test public void testChannelPoolBorrow() {
        FabricJavaPoolConfig config = new FabricJavaPoolConfig();
        config.setMaxTotal(5);
        config.setMaxWaitMillis(1000);
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(TestUtil.getUser(), TestUtil.myChannel, config);
        try {
            for (int i = 0; i < 5; i++) {
                FabricConnection o = fabricConnectionPool.borrowObject();
                assertNotNull(o);
            }
        } catch (Exception e) {
            assertNull(e);
        }
        try {
            fabricConnectionPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}
