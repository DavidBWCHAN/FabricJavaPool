/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.samyuan1990.FabricJavaPool;

import com.github.samyuan1990.FabricJavaPool.util.Util;
import org.apache.commons.pool2.ObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

public class FabricJavaPoolTest {

    @Test public void testChannelPool() {
        ObjectPool<FabricConnection>  myChannelPool = new FabricJavaPool(Util.netWorkConfig, Util.getUser(), Util.myChannel);
        try {
            FabricConnection myChannel = myChannelPool.borrowObject();
            assertNotEquals("Test borrow item channel not null", myChannel, null);
            assertEquals("Test borrow item channel", myChannel.getMychannel().isInitialized(), true);
            FabricConnection myChannel2 = myChannelPool.borrowObject();
            assertNotEquals("Test borrow item channel2 not null", myChannel2, null);
            assertEquals("Test borrow item channel2", myChannel2.getMychannel().isInitialized(), true);
            assertEquals("Test item should diff", myChannel2.equals(myChannel), false);
            System.out.println(System.getenv("ORG_GRADLE_PROJECT_LocalFabric"));
            if (System.getenv("ORG_GRADLE_PROJECT_LocalFabric").equals("true")) {
                String rs = myChannel.query(Util.myCC, Util.myCCVersion, "query", "a");
                assertEquals("90", rs);
                System.out.println(rs);
                String rs2 = myChannel2.query(Util.myCC, Util.myCCVersion, "query", "a");
                assertNotEquals("91", rs2);
            }
            myChannelPool.returnObject(myChannel);
            myChannelPool.returnObject(myChannel2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test public void testChannelPoolException() {
        ObjectPool<FabricConnection>  myChannelPool = new FabricJavaPool("./src/test/resources/Networkconfig.json", null, Util.myChannel);
        try {
            myChannelPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test public void testChannelPoolBorrow() {
        GenericObjectPoolConfig config = new GenericObjectPoolConfig();
        config.setMaxTotal(5);
        config.setMaxWaitMillis(1000);
        ObjectPool<FabricConnection>  myChannelPool = new FabricJavaPool("./src/test/resources/Networkconfig.json", Util.getUser(), Util.myChannel, config);
        try {
            for (int i = 0; i < 5; i++) {
                FabricConnection o = myChannelPool.borrowObject();
                assertNotNull(o);
            }
        } catch (Exception e) {
            assertNull(e);
        }
        try {
            myChannelPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}
