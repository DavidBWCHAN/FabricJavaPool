/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.github.samyuan1990.FabricJavaPool;

import com.github.samyuan1990.FabricJavaPool.Pool.FabricJavaPool;
import com.github.samyuan1990.FabricJavaPool.api.FabricConnection;
import com.github.samyuan1990.FabricJavaPool.util.TestUtil;
import org.apache.commons.pool2.ObjectPool;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.junit.Assert.assertEquals;

public class FabricJavaPoolTest {

    @Test public void testChannelPool() {
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(TestUtil.getUser(), TestUtil.myChannel);
        try {
            FabricConnection fabricConnectionImpl = fabricConnectionPool.borrowObject();
            assertNotEquals("Test borrow item channel not null", fabricConnectionImpl, null);
            FabricConnection fabricConnectionImpl2 = fabricConnectionPool.borrowObject();
            assertNotEquals("Test borrow item channel2 not null", fabricConnectionImpl2, null);
            assertEquals("Test item should diff", fabricConnectionImpl2.equals(fabricConnectionImpl), false);
            fabricConnectionPool.returnObject(fabricConnectionImpl);
            fabricConnectionPool.returnObject(fabricConnectionImpl2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Test public void testChannelPoolException() {
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(null, TestUtil.myChannel);
        try {
            fabricConnectionPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }

    @Test public void testChannelPoolBorrow() {
        FabricJavaPoolConfig config = new FabricJavaPoolConfig();
        config.setMaxTotal(5);
        config.setMaxWaitMillis(1000);
        ObjectPool<FabricConnection>  fabricConnectionPool = new FabricJavaPool(TestUtil.getUser(), TestUtil.myChannel, config);
        try {
            for (int i = 0; i < 5; i++) {
                FabricConnection o = fabricConnectionPool.borrowObject();
                assertNotNull(o);
            }
        } catch (Exception e) {
            assertNull(e);
        }
        try {
            fabricConnectionPool.borrowObject();
        } catch (Exception e) {
            assertNotNull(e);
        }
    }
}
