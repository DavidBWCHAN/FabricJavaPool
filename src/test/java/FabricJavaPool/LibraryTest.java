/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package FabricJavaPool;

import org.apache.commons.pool2.ObjectPool;
import org.hyperledger.fabric.sdk.*;
import org.junit.Test;

import java.util.Collection;

import static org.junit.Assert.*;

public class LibraryTest {

    public static String Query(Channel mychannel,String chaincodeName,String fcn,String... arguments) {
        String payload="";
        try {
            ChaincodeID chaincodeID = ChaincodeID.newBuilder().setName(chaincodeName)
                    .setVersion("1.0")
                    .build();
            HFClient hfclient = HFClient.createNewInstance();
            QueryByChaincodeRequest transactionProposalRequest = hfclient.newQueryProposalRequest();
            transactionProposalRequest.setChaincodeID(chaincodeID);
            transactionProposalRequest.setFcn(fcn);
            transactionProposalRequest.setArgs(arguments);
            //transactionProposalRequest.setProposalWaitTime(500);
            transactionProposalRequest.setUserContext(Library.getUser());

            Collection<ProposalResponse> queryPropResp = mychannel.queryByChaincode(transactionProposalRequest);
            for(ProposalResponse response:queryPropResp) {
                if (response.getStatus() == ChaincodeResponse.Status.SUCCESS) {
                    payload = response.getProposalResponse().getResponse().getPayload().toStringUtf8();
                    //System.out.println(payload);
                }
            }
            //mychannel.queryByChaincode(queryPropResp);
        } catch (Exception e) {
            System.out.printf(e.toString());
        }

        return payload;
    }

    @Test public void testChannelPool() {
        ObjectPool<Channel>  mychannelPool = Library.ChannelPool();
        try {
            Channel mychannel = mychannelPool.borrowObject();
            assertNotEquals("Test borrow item channel not null",mychannel,null);
            assertEquals("Test borrow item channel",mychannel.isInitialized(),true);
            Channel mychannel2 = mychannelPool.borrowObject();
            assertNotEquals("Test borrow item channel2 not null",mychannel2,null);
            assertEquals("Test borrow item channel2",mychannel2.isInitialized(),true);
            assertEquals("Test item should diff",mychannel2.equals(mychannel),false);
            mychannelPool.returnObject(mychannel);
            mychannelPool.returnObject(mychannel2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
